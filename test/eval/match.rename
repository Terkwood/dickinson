Dickinson
  { modImports = []
  , modDefs =
    [ Define
      { declAnn = ()
      , defName = Name
        { name = "fst" :| []
        , unique = Unique { unUnique = 11 }
        , loc = ()
        }
      , defExpr = Lambda
        { exprAnn = ()
        , lambdaVar = Name
          { name = "xy" :| []
          , unique = Unique { unUnique = 15 }
          , loc = ()
          }
        , lambdaTy = TyTuple ()
          ( TyText () :| [ TyText () ] )
        , lambdaExpr = Match
          { exprAnn = ()
          , exprMatch = Var
            { exprAnn = ()
            , exprVar = Name
              { name = "xy" :| []
              , unique = Unique { unUnique = 15 }
              , loc = ()
              }
            }
          , exprPat = PatternTuple ()
            ( PatternVar ()
              ( Name
                { name = "x" :| []
                , unique = Unique { unUnique = 16 }
                , loc = ()
                }
              ) :| [ Wildcard () ]
            )
          , exprIn = Var
            { exprAnn = ()
            , exprVar = Name
              { name = "x" :| []
              , unique = Unique { unUnique = 16 }
              , loc = ()
              }
            }
          }
        }
      }
    , Define
      { declAnn = ()
      , defName = Name
        { name = "snd" :| []
        , unique = Unique { unUnique = 12 }
        , loc = ()
        }
      , defExpr = Lambda
        { exprAnn = ()
        , lambdaVar = Name
          { name = "xy" :| []
          , unique = Unique { unUnique = 17 }
          , loc = ()
          }
        , lambdaTy = TyTuple ()
          ( TyText () :| [ TyText () ] )
        , lambdaExpr = Match
          { exprAnn = ()
          , exprMatch = Var
            { exprAnn = ()
            , exprVar = Name
              { name = "xy" :| []
              , unique = Unique { unUnique = 17 }
              , loc = ()
              }
            }
          , exprPat = PatternTuple ()
            ( Wildcard () :|
              [ PatternVar ()
                ( Name
                  { name = "y" :| []
                  , unique = Unique { unUnique = 18 }
                  , loc = ()
                  }
                )
              ]
            )
          , exprIn = Var
            { exprAnn = ()
            , exprVar = Name
              { name = "y" :| []
              , unique = Unique { unUnique = 18 }
              , loc = ()
              }
            }
          }
        }
      }
    , Define
      { declAnn = ()
      , defName = Name
        { name = "greeter" :| []
        , unique = Unique { unUnique = 13 }
        , loc = ()
        }
      , defExpr = Lambda
        { exprAnn = ()
        , lambdaVar = Name
          { name = "dog" :| []
          , unique = Unique { unUnique = 19 }
          , loc = ()
          }
        , lambdaTy = TyTuple ()
          ( TyText () :| [ TyText () ] )
        , lambdaExpr = Let
          { exprAnn = ()
          , letBinds =
            ( Name
              { name = "name" :| []
              , unique = Unique { unUnique = 20 }
              , loc = ()
              }
            , Apply
              { exprAnn = ()
              , exprFun = Var
                { exprAnn = ()
                , exprVar = Name
                  { name = "fst" :| []
                  , unique = Unique { unUnique = 11 }
                  , loc = ()
                  }
                }
              , exprArg = Var
                { exprAnn = ()
                , exprVar = Name
                  { name = "dog" :| []
                  , unique = Unique { unUnique = 19 }
                  , loc = ()
                  }
                }
              }
            ) :|
            [
              ( Name
                { name = "pronoun" :| []
                , unique = Unique { unUnique = 21 }
                , loc = ()
                }
              , Apply
                { exprAnn = ()
                , exprFun = Var
                  { exprAnn = ()
                  , exprVar = Name
                    { name = "snd" :| []
                    , unique = Unique { unUnique = 12 }
                    , loc = ()
                    }
                  }
                , exprArg = Var
                  { exprAnn = ()
                  , exprVar = Name
                    { name = "dog" :| []
                    , unique = Unique { unUnique = 19 }
                    , loc = ()
                    }
                  }
                }
              )
            ]
          , letExpr = Choice
            { exprAnn = ()
            , choices =
              ( 0.3333333333333333
              , Interp
                { exprAnn = ()
                , exprInterp =
                  [ Var
                    { exprAnn = ()
                    , exprVar = Name
                      { name = "name" :| []
                      , unique = Unique { unUnique = 20 }
                      , loc = ()
                      }
                    }
                  , StrChunk
                    { exprAnn = ()
                    , chunkText = " is a heckin' fine floofer"
                    }
                  ]
                }
              ) :|
              [
                ( 0.3333333333333333
                , Interp
                  { exprAnn = ()
                  , exprInterp =
                    [ Var
                      { exprAnn = ()
                      , exprVar = Name
                        { name = "name" :| []
                        , unique = Unique { unUnique = 20 }
                        , loc = ()
                        }
                      }
                    , StrChunk
                      { exprAnn = ()
                      , chunkText = " is a good woofer"
                      }
                    ]
                  }
                )
              ,
                ( 0.3333333333333333
                , Interp
                  { exprAnn = ()
                  , exprInterp =
                    [ Var
                      { exprAnn = ()
                      , exprVar = Name
                        { name = "name" :| []
                        , unique = Unique { unUnique = 20 }
                        , loc = ()
                        }
                      }
                    , StrChunk
                      { exprAnn = ()
                      , chunkText = " eats toilet paper sometimes but "
                      }
                    , Var
                      { exprAnn = ()
                      , exprVar = Name
                        { name = "pronoun" :| []
                        , unique = Unique { unUnique = 21 }
                        , loc = ()
                        }
                      }
                    , StrChunk
                      { exprAnn = ()
                      , chunkText = " tries."
                      }
                    ]
                  }
                )
              ]
            }
          }
        }
      }
    , Define
      { declAnn = ()
      , defName = Name
        { name = "main" :| []
        , unique = Unique { unUnique = 14 }
        , loc = ()
        }
      , defExpr = Apply
        { exprAnn = ()
        , exprFun = Var
          { exprAnn = ()
          , exprVar = Name
            { name = "greeter" :| []
            , unique = Unique { unUnique = 13 }
            , loc = ()
            }
          }
        , exprArg = Tuple
          { exprAnn = ()
          , exprTup = Literal
            { exprAnn = ()
            , litText = "Maxine"
            } :|
            [ Literal
              { exprAnn = ()
              , litText = "she"
              }
            ]
          }
        }
      }
    ]
  }
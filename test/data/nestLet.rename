Dickinson
  { modImports = []
  , modDefs =
    [ Define
      { declAnn = ()
      , defName = Name
        { name = "letBinding" :| []
        , unique = Unique { unUnique = 5 }
        , loc = ()
        }
      , defExpr = Let ()
        (
          ( Name
            { name = "a" :| []
            , unique = Unique { unUnique = 6 }
            , loc = ()
            }
          , Let ()
            (
              ( Name
                { name = "a" :| []
                , unique = Unique { unUnique = 9 }
                , loc = ()
                }
              , Literal () "man"
              ) :| []
            )
            ( Var ()
              ( Name
                { name = "a" :| []
                , unique = Unique { unUnique = 9 }
                , loc = ()
                }
              )
            )
          ) :|
          [
            ( Name
              { name = "b" :| []
              , unique = Unique { unUnique = 7 }
              , loc = ()
              }
            , Let ()
              (
                ( Name
                  { name = "a" :| []
                  , unique = Unique { unUnique = 10 }
                  , loc = ()
                  }
                , Literal () "woman"
                ) :| []
              )
              ( Var ()
                ( Name
                  { name = "a" :| []
                  , unique = Unique { unUnique = 10 }
                  , loc = ()
                  }
                )
              )
            )
          ,
            ( Name
              { name = "c" :| []
              , unique = Unique { unUnique = 8 }
              , loc = ()
              }
            , Let ()
              (
                ( Name
                  { name = "a" :| []
                  , unique = Unique { unUnique = 11 }
                  , loc = ()
                  }
                , Literal () "non-binary"
                ) :| []
              )
              ( Var ()
                ( Name
                  { name = "a" :| []
                  , unique = Unique { unUnique = 11 }
                  , loc = ()
                  }
                )
              )
            )
          ]
        )
        ( Choice ()
          (
            ( 1.0
            , Let ()
              (
                ( Name
                  { name = "b" :| []
                  , unique = Unique { unUnique = 12 }
                  , loc = ()
                  }
                , Var ()
                  ( Name
                    { name = "a" :| []
                    , unique = Unique { unUnique = 6 }
                    , loc = ()
                    }
                  )
                ) :| []
              )
              ( Var ()
                ( Name
                  { name = "b" :| []
                  , unique = Unique { unUnique = 12 }
                  , loc = ()
                  }
                )
              )
            ) :|
            [
              ( 1.0
              , Var ()
                ( Name
                  { name = "b" :| []
                  , unique = Unique { unUnique = 7 }
                  , loc = ()
                  }
                )
              )
            ]
          )
        )
      }
    ]
  }
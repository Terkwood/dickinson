Dickinson
  { modImports = []
  , modDefs =
    [ Define
      { declAnn = ()
      , defName = Name
        { name = "letBinding" :| []
        , unique = Unique
          { unUnique = 5 }
        , loc = ()
        }
      , defExpr = Let
        { exprAnn = ()
        , letBinds =
          ( Name
            { name = "a" :| []
            , unique = Unique
              { unUnique = 6 }
            , loc = ()
            }
          , Let
            { exprAnn = ()
            , letBinds =
              ( Name
                { name = "a" :| []
                , unique = Unique
                  { unUnique = 9 }
                , loc = ()
                }
              , Literal
                { exprAnn = ()
                , litText = "man"
                }
              ) :| []
            , letExpr = Var
              { exprAnn = ()
              , exprVar = Name
                { name = "a" :| []
                , unique = Unique
                  { unUnique = 9 }
                , loc = ()
                }
              }
            }
          ) :|
          [
            ( Name
              { name = "b" :| []
              , unique = Unique
                { unUnique = 7 }
              , loc = ()
              }
            , Let
              { exprAnn = ()
              , letBinds =
                ( Name
                  { name = "a" :| []
                  , unique = Unique
                    { unUnique = 10 }
                  , loc = ()
                  }
                , Literal
                  { exprAnn = ()
                  , litText = "woman"
                  }
                ) :| []
              , letExpr = Var
                { exprAnn = ()
                , exprVar = Name
                  { name = "a" :| []
                  , unique = Unique
                    { unUnique = 10 }
                  , loc = ()
                  }
                }
              }
            )
          ,
            ( Name
              { name = "c" :| []
              , unique = Unique
                { unUnique = 8 }
              , loc = ()
              }
            , Let
              { exprAnn = ()
              , letBinds =
                ( Name
                  { name = "a" :| []
                  , unique = Unique
                    { unUnique = 11 }
                  , loc = ()
                  }
                , Literal
                  { exprAnn = ()
                  , litText = "non-binary"
                  }
                ) :| []
              , letExpr = Var
                { exprAnn = ()
                , exprVar = Name
                  { name = "a" :| []
                  , unique = Unique
                    { unUnique = 11 }
                  , loc = ()
                  }
                }
              }
            )
          ]
        , letExpr = Choice
          { exprAnn = ()
          , choices =
            ( 1.0
            , Let
              { exprAnn = ()
              , letBinds =
                ( Name
                  { name = "b" :| []
                  , unique = Unique
                    { unUnique = 12 }
                  , loc = ()
                  }
                , Var
                  { exprAnn = ()
                  , exprVar = Name
                    { name = "a" :| []
                    , unique = Unique
                      { unUnique = 6 }
                    , loc = ()
                    }
                  }
                ) :| []
              , letExpr = Var
                { exprAnn = ()
                , exprVar = Name
                  { name = "b" :| []
                  , unique = Unique
                    { unUnique = 12 }
                  , loc = ()
                  }
                }
              }
            ) :|
            [
              ( 1.0
              , Var
                { exprAnn = ()
                , exprVar = Name
                  { name = "b" :| []
                  , unique = Unique
                    { unUnique = 7 }
                  , loc = ()
                  }
                }
              )
            ]
          }
        }
      }
    ]
  }
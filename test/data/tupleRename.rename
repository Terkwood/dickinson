Dickinson
  { modImports = []
  , modDefs =
    [ Define
      { declAnn = AlexPn 5 3 2
      , defName = Name
        { name = "prolix" :| []
        , unique = Unique { unUnique = 4 }
        , loc = AlexPn 10 3 7
        }
      , defExpr = Let ( AlexPn 20 4 4 )
        (
          ( Name
            { name = "xy" :| []
            , unique = Unique { unUnique = 5 }
            , loc = AlexPn 30 5 6
            }
          , Literal ( AlexPn 33 5 9 ) "hello"
          ) :| []
        )
        ( Lambda ( AlexPn 49 6 8 )
          ( Name
            { name = "xy" :| []
            , unique = Unique { unUnique = 7 }
            , loc = AlexPn 57 6 16
            }
          )
          ( TyTuple
            ( TyText :| [ TyText ] )
          )
          ( Match ( AlexPn 82 7 10 )
            ( Var ( AlexPn 89 7 17 )
              ( Name
                { name = "xy" :| []
                , unique = Unique { unUnique = 7 }
                , loc = AlexPn 89 7 17
                }
              )
            )
            ( PatternTuple ( AlexPn 92 7 20 )
              ( PatternVar ( AlexPn 93 7 21 )
                ( Name
                  { name = "x" :| []
                  , unique = Unique { unUnique = 8 }
                  , loc = AlexPn 93 7 21
                  }
                ) :|
                [ Wildcard ( AlexPn 96 7 24 ) ]
              )
            )
            ( Var ( AlexPn 109 8 11 )
              ( Name
                { name = "x" :| []
                , unique = Unique { unUnique = 8 }
                , loc = AlexPn 109 8 11
                }
              )
            )
          )
        )
      }
    ]
  }
Dickinson
  { modImports = []
  , modDefs =
    [ Define
      { declAnn = ()
      , defName = Name
        { name = "prolix" :| []
        , unique = Unique
          { unUnique = 4 }
        , loc = ()
        }
      , defExpr = Let
        { exprAnn = ()
        , letBinds =
          ( Name
            { name = "xy" :| []
            , unique = Unique
              { unUnique = 5 }
            , loc = ()
            }
          , Literal
            { exprAnn = ()
            , litText = "hello"
            }
          ) :| []
        , letExpr = Lambda
          { exprAnn = ()
          , lambdaVar = Name
            { name = "xy" :| []
            , unique = Unique
              { unUnique = 6 }
            , loc = ()
            }
          , lambdaTy = TyTuple ()
            ( TyText () :|
              [ TyText () ]
            )
          , lambdaExpr = Match
            { exprAnn = ()
            , exprMatch = Var
              { exprAnn = ()
              , exprVar = Name
                { name = "xy" :| []
                , unique = Unique
                  { unUnique = 6 }
                , loc = ()
                }
              }
            , exprBranch =
              ( PatternTuple
                { patAnn = ()
                , patTup = PatternVar
                  { patAnn = ()
                  , patName = Name
                    { name = "x" :| []
                    , unique = Unique
                      { unUnique = 7 }
                    , loc = ()
                    }
                  } :|
                  [ Wildcard
                    { patAnn = () }
                  ]
                }
              , Var
                { exprAnn = ()
                , exprVar = Name
                  { name = "x" :| []
                  , unique = Unique
                    { unUnique = 7 }
                  , loc = ()
                  }
                }
              ) :| []
            }
          }
        }
      }
    ]
  }